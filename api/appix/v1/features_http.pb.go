// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v3.12.4
// source: api/appix/v1/features.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFeaturesCreateFeatures = "/api.appix.v1.Features/CreateFeatures"
const OperationFeaturesDeleteFeatures = "/api.appix.v1.Features/DeleteFeatures"
const OperationFeaturesGetFeatures = "/api.appix.v1.Features/GetFeatures"
const OperationFeaturesListFeatures = "/api.appix.v1.Features/ListFeatures"
const OperationFeaturesUpdateFeatures = "/api.appix.v1.Features/UpdateFeatures"

type FeaturesHTTPServer interface {
	CreateFeatures(context.Context, *CreateFeaturesRequest) (*CreateFeaturesReply, error)
	DeleteFeatures(context.Context, *DeleteFeaturesRequest) (*DeleteFeaturesReply, error)
	GetFeatures(context.Context, *GetFeaturesRequest) (*GetFeaturesReply, error)
	ListFeatures(context.Context, *ListFeaturesRequest) (*ListFeaturesReply, error)
	UpdateFeatures(context.Context, *UpdateFeaturesRequest) (*UpdateFeaturesReply, error)
}

func RegisterFeaturesHTTPServer(s *http.Server, srv FeaturesHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/features/create", _Features_CreateFeatures0_HTTP_Handler(srv))
	r.POST("/api/v1/features/update", _Features_UpdateFeatures0_HTTP_Handler(srv))
	r.POST("/api/v1/features/delete", _Features_DeleteFeatures0_HTTP_Handler(srv))
	r.GET("/api/v1/features/{id}", _Features_GetFeatures0_HTTP_Handler(srv))
	r.POST("/api/v1/features/list", _Features_ListFeatures0_HTTP_Handler(srv))
}

func _Features_CreateFeatures0_HTTP_Handler(srv FeaturesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateFeaturesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeaturesCreateFeatures)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateFeatures(ctx, req.(*CreateFeaturesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateFeaturesReply)
		return ctx.Result(200, reply)
	}
}

func _Features_UpdateFeatures0_HTTP_Handler(srv FeaturesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateFeaturesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeaturesUpdateFeatures)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateFeatures(ctx, req.(*UpdateFeaturesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateFeaturesReply)
		return ctx.Result(200, reply)
	}
}

func _Features_DeleteFeatures0_HTTP_Handler(srv FeaturesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteFeaturesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeaturesDeleteFeatures)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteFeatures(ctx, req.(*DeleteFeaturesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteFeaturesReply)
		return ctx.Result(200, reply)
	}
}

func _Features_GetFeatures0_HTTP_Handler(srv FeaturesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetFeaturesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeaturesGetFeatures)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetFeatures(ctx, req.(*GetFeaturesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetFeaturesReply)
		return ctx.Result(200, reply)
	}
}

func _Features_ListFeatures0_HTTP_Handler(srv FeaturesHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListFeaturesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFeaturesListFeatures)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListFeatures(ctx, req.(*ListFeaturesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListFeaturesReply)
		return ctx.Result(200, reply)
	}
}

type FeaturesHTTPClient interface {
	CreateFeatures(ctx context.Context, req *CreateFeaturesRequest, opts ...http.CallOption) (rsp *CreateFeaturesReply, err error)
	DeleteFeatures(ctx context.Context, req *DeleteFeaturesRequest, opts ...http.CallOption) (rsp *DeleteFeaturesReply, err error)
	GetFeatures(ctx context.Context, req *GetFeaturesRequest, opts ...http.CallOption) (rsp *GetFeaturesReply, err error)
	ListFeatures(ctx context.Context, req *ListFeaturesRequest, opts ...http.CallOption) (rsp *ListFeaturesReply, err error)
	UpdateFeatures(ctx context.Context, req *UpdateFeaturesRequest, opts ...http.CallOption) (rsp *UpdateFeaturesReply, err error)
}

type FeaturesHTTPClientImpl struct {
	cc *http.Client
}

func NewFeaturesHTTPClient(client *http.Client) FeaturesHTTPClient {
	return &FeaturesHTTPClientImpl{client}
}

func (c *FeaturesHTTPClientImpl) CreateFeatures(ctx context.Context, in *CreateFeaturesRequest, opts ...http.CallOption) (*CreateFeaturesReply, error) {
	var out CreateFeaturesReply
	pattern := "/api/v1/features/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFeaturesCreateFeatures))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FeaturesHTTPClientImpl) DeleteFeatures(ctx context.Context, in *DeleteFeaturesRequest, opts ...http.CallOption) (*DeleteFeaturesReply, error) {
	var out DeleteFeaturesReply
	pattern := "/api/v1/features/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFeaturesDeleteFeatures))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FeaturesHTTPClientImpl) GetFeatures(ctx context.Context, in *GetFeaturesRequest, opts ...http.CallOption) (*GetFeaturesReply, error) {
	var out GetFeaturesReply
	pattern := "/api/v1/features/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationFeaturesGetFeatures))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FeaturesHTTPClientImpl) ListFeatures(ctx context.Context, in *ListFeaturesRequest, opts ...http.CallOption) (*ListFeaturesReply, error) {
	var out ListFeaturesReply
	pattern := "/api/v1/features/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFeaturesListFeatures))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *FeaturesHTTPClientImpl) UpdateFeatures(ctx context.Context, in *UpdateFeaturesRequest, opts ...http.CallOption) (*UpdateFeaturesReply, error) {
	var out UpdateFeaturesReply
	pattern := "/api/v1/features/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFeaturesUpdateFeatures))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

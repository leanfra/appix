// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v3.12.4
// source: api/appix/v1/applications.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationApplicationsCreateApplications = "/api.appix.v1.Applications/CreateApplications"
const OperationApplicationsDeleteApplications = "/api.appix.v1.Applications/DeleteApplications"
const OperationApplicationsGetApplications = "/api.appix.v1.Applications/GetApplications"
const OperationApplicationsListApplications = "/api.appix.v1.Applications/ListApplications"
const OperationApplicationsMatchAppHostgroups = "/api.appix.v1.Applications/MatchAppHostgroups"
const OperationApplicationsUpdateApplications = "/api.appix.v1.Applications/UpdateApplications"

type ApplicationsHTTPServer interface {
	CreateApplications(context.Context, *CreateApplicationsRequest) (*CreateApplicationsReply, error)
	DeleteApplications(context.Context, *DeleteApplicationsRequest) (*DeleteApplicationsReply, error)
	GetApplications(context.Context, *GetApplicationsRequest) (*GetApplicationsReply, error)
	ListApplications(context.Context, *ListApplicationsRequest) (*ListApplicationsReply, error)
	MatchAppHostgroups(context.Context, *MatchAppHostgroupsRequest) (*MatchAppHostgroupsReply, error)
	UpdateApplications(context.Context, *UpdateApplicationsRequest) (*UpdateApplicationsReply, error)
}

func RegisterApplicationsHTTPServer(s *http.Server, srv ApplicationsHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/applications/create", _Applications_CreateApplications0_HTTP_Handler(srv))
	r.POST("/api/v1/applications/update", _Applications_UpdateApplications0_HTTP_Handler(srv))
	r.POST("/api/v1/applications/delete", _Applications_DeleteApplications0_HTTP_Handler(srv))
	r.GET("/api/v1/applications/{id}", _Applications_GetApplications0_HTTP_Handler(srv))
	r.POST("/api/v1/applications/list", _Applications_ListApplications0_HTTP_Handler(srv))
	r.POST("/api/v1/applications/match-hostgroups", _Applications_MatchAppHostgroups0_HTTP_Handler(srv))
}

func _Applications_CreateApplications0_HTTP_Handler(srv ApplicationsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateApplicationsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApplicationsCreateApplications)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateApplications(ctx, req.(*CreateApplicationsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateApplicationsReply)
		return ctx.Result(200, reply)
	}
}

func _Applications_UpdateApplications0_HTTP_Handler(srv ApplicationsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateApplicationsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApplicationsUpdateApplications)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateApplications(ctx, req.(*UpdateApplicationsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateApplicationsReply)
		return ctx.Result(200, reply)
	}
}

func _Applications_DeleteApplications0_HTTP_Handler(srv ApplicationsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteApplicationsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApplicationsDeleteApplications)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteApplications(ctx, req.(*DeleteApplicationsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteApplicationsReply)
		return ctx.Result(200, reply)
	}
}

func _Applications_GetApplications0_HTTP_Handler(srv ApplicationsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetApplicationsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApplicationsGetApplications)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetApplications(ctx, req.(*GetApplicationsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetApplicationsReply)
		return ctx.Result(200, reply)
	}
}

func _Applications_ListApplications0_HTTP_Handler(srv ApplicationsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListApplicationsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApplicationsListApplications)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListApplications(ctx, req.(*ListApplicationsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListApplicationsReply)
		return ctx.Result(200, reply)
	}
}

func _Applications_MatchAppHostgroups0_HTTP_Handler(srv ApplicationsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MatchAppHostgroupsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationApplicationsMatchAppHostgroups)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.MatchAppHostgroups(ctx, req.(*MatchAppHostgroupsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MatchAppHostgroupsReply)
		return ctx.Result(200, reply)
	}
}

type ApplicationsHTTPClient interface {
	CreateApplications(ctx context.Context, req *CreateApplicationsRequest, opts ...http.CallOption) (rsp *CreateApplicationsReply, err error)
	DeleteApplications(ctx context.Context, req *DeleteApplicationsRequest, opts ...http.CallOption) (rsp *DeleteApplicationsReply, err error)
	GetApplications(ctx context.Context, req *GetApplicationsRequest, opts ...http.CallOption) (rsp *GetApplicationsReply, err error)
	ListApplications(ctx context.Context, req *ListApplicationsRequest, opts ...http.CallOption) (rsp *ListApplicationsReply, err error)
	MatchAppHostgroups(ctx context.Context, req *MatchAppHostgroupsRequest, opts ...http.CallOption) (rsp *MatchAppHostgroupsReply, err error)
	UpdateApplications(ctx context.Context, req *UpdateApplicationsRequest, opts ...http.CallOption) (rsp *UpdateApplicationsReply, err error)
}

type ApplicationsHTTPClientImpl struct {
	cc *http.Client
}

func NewApplicationsHTTPClient(client *http.Client) ApplicationsHTTPClient {
	return &ApplicationsHTTPClientImpl{client}
}

func (c *ApplicationsHTTPClientImpl) CreateApplications(ctx context.Context, in *CreateApplicationsRequest, opts ...http.CallOption) (*CreateApplicationsReply, error) {
	var out CreateApplicationsReply
	pattern := "/api/v1/applications/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApplicationsCreateApplications))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ApplicationsHTTPClientImpl) DeleteApplications(ctx context.Context, in *DeleteApplicationsRequest, opts ...http.CallOption) (*DeleteApplicationsReply, error) {
	var out DeleteApplicationsReply
	pattern := "/api/v1/applications/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApplicationsDeleteApplications))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ApplicationsHTTPClientImpl) GetApplications(ctx context.Context, in *GetApplicationsRequest, opts ...http.CallOption) (*GetApplicationsReply, error) {
	var out GetApplicationsReply
	pattern := "/api/v1/applications/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationApplicationsGetApplications))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ApplicationsHTTPClientImpl) ListApplications(ctx context.Context, in *ListApplicationsRequest, opts ...http.CallOption) (*ListApplicationsReply, error) {
	var out ListApplicationsReply
	pattern := "/api/v1/applications/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApplicationsListApplications))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ApplicationsHTTPClientImpl) MatchAppHostgroups(ctx context.Context, in *MatchAppHostgroupsRequest, opts ...http.CallOption) (*MatchAppHostgroupsReply, error) {
	var out MatchAppHostgroupsReply
	pattern := "/api/v1/applications/match-hostgroups"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApplicationsMatchAppHostgroups))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ApplicationsHTTPClientImpl) UpdateApplications(ctx context.Context, in *UpdateApplicationsRequest, opts ...http.CallOption) (*UpdateApplicationsReply, error) {
	var out UpdateApplicationsReply
	pattern := "/api/v1/applications/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationApplicationsUpdateApplications))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

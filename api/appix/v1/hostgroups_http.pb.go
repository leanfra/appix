// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v3.12.4
// source: api/appix/v1/hostgroups.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationHostgroupsCreateHostgroups = "/api.appix.v1.Hostgroups/CreateHostgroups"
const OperationHostgroupsDeleteHostgroups = "/api.appix.v1.Hostgroups/DeleteHostgroups"
const OperationHostgroupsGetHostgroups = "/api.appix.v1.Hostgroups/GetHostgroups"
const OperationHostgroupsListHostgroups = "/api.appix.v1.Hostgroups/ListHostgroups"
const OperationHostgroupsUpdateHostgroups = "/api.appix.v1.Hostgroups/UpdateHostgroups"

type HostgroupsHTTPServer interface {
	CreateHostgroups(context.Context, *CreateHostgroupsRequest) (*CreateHostgroupsReply, error)
	DeleteHostgroups(context.Context, *DeleteHostgroupsRequest) (*DeleteHostgroupsReply, error)
	GetHostgroups(context.Context, *GetHostgroupsRequest) (*GetHostgroupsReply, error)
	ListHostgroups(context.Context, *ListHostgroupsRequest) (*ListHostgroupsReply, error)
	UpdateHostgroups(context.Context, *UpdateHostgroupsRequest) (*UpdateHostgroupsReply, error)
}

func RegisterHostgroupsHTTPServer(s *http.Server, srv HostgroupsHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/hostgroups/create", _Hostgroups_CreateHostgroups0_HTTP_Handler(srv))
	r.POST("/api/v1/hostgroups/update", _Hostgroups_UpdateHostgroups0_HTTP_Handler(srv))
	r.POST("/api/v1/hostgroups/delete", _Hostgroups_DeleteHostgroups0_HTTP_Handler(srv))
	r.GET("/api/v1/hostgroups/{id}", _Hostgroups_GetHostgroups0_HTTP_Handler(srv))
	r.POST("/api/v1/hostgroups/list", _Hostgroups_ListHostgroups0_HTTP_Handler(srv))
}

func _Hostgroups_CreateHostgroups0_HTTP_Handler(srv HostgroupsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateHostgroupsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHostgroupsCreateHostgroups)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateHostgroups(ctx, req.(*CreateHostgroupsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateHostgroupsReply)
		return ctx.Result(200, reply)
	}
}

func _Hostgroups_UpdateHostgroups0_HTTP_Handler(srv HostgroupsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateHostgroupsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHostgroupsUpdateHostgroups)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateHostgroups(ctx, req.(*UpdateHostgroupsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateHostgroupsReply)
		return ctx.Result(200, reply)
	}
}

func _Hostgroups_DeleteHostgroups0_HTTP_Handler(srv HostgroupsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteHostgroupsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHostgroupsDeleteHostgroups)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteHostgroups(ctx, req.(*DeleteHostgroupsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteHostgroupsReply)
		return ctx.Result(200, reply)
	}
}

func _Hostgroups_GetHostgroups0_HTTP_Handler(srv HostgroupsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetHostgroupsRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHostgroupsGetHostgroups)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetHostgroups(ctx, req.(*GetHostgroupsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetHostgroupsReply)
		return ctx.Result(200, reply)
	}
}

func _Hostgroups_ListHostgroups0_HTTP_Handler(srv HostgroupsHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListHostgroupsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationHostgroupsListHostgroups)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListHostgroups(ctx, req.(*ListHostgroupsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListHostgroupsReply)
		return ctx.Result(200, reply)
	}
}

type HostgroupsHTTPClient interface {
	CreateHostgroups(ctx context.Context, req *CreateHostgroupsRequest, opts ...http.CallOption) (rsp *CreateHostgroupsReply, err error)
	DeleteHostgroups(ctx context.Context, req *DeleteHostgroupsRequest, opts ...http.CallOption) (rsp *DeleteHostgroupsReply, err error)
	GetHostgroups(ctx context.Context, req *GetHostgroupsRequest, opts ...http.CallOption) (rsp *GetHostgroupsReply, err error)
	ListHostgroups(ctx context.Context, req *ListHostgroupsRequest, opts ...http.CallOption) (rsp *ListHostgroupsReply, err error)
	UpdateHostgroups(ctx context.Context, req *UpdateHostgroupsRequest, opts ...http.CallOption) (rsp *UpdateHostgroupsReply, err error)
}

type HostgroupsHTTPClientImpl struct {
	cc *http.Client
}

func NewHostgroupsHTTPClient(client *http.Client) HostgroupsHTTPClient {
	return &HostgroupsHTTPClientImpl{client}
}

func (c *HostgroupsHTTPClientImpl) CreateHostgroups(ctx context.Context, in *CreateHostgroupsRequest, opts ...http.CallOption) (*CreateHostgroupsReply, error) {
	var out CreateHostgroupsReply
	pattern := "/api/v1/hostgroups/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationHostgroupsCreateHostgroups))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HostgroupsHTTPClientImpl) DeleteHostgroups(ctx context.Context, in *DeleteHostgroupsRequest, opts ...http.CallOption) (*DeleteHostgroupsReply, error) {
	var out DeleteHostgroupsReply
	pattern := "/api/v1/hostgroups/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationHostgroupsDeleteHostgroups))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HostgroupsHTTPClientImpl) GetHostgroups(ctx context.Context, in *GetHostgroupsRequest, opts ...http.CallOption) (*GetHostgroupsReply, error) {
	var out GetHostgroupsReply
	pattern := "/api/v1/hostgroups/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationHostgroupsGetHostgroups))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HostgroupsHTTPClientImpl) ListHostgroups(ctx context.Context, in *ListHostgroupsRequest, opts ...http.CallOption) (*ListHostgroupsReply, error) {
	var out ListHostgroupsReply
	pattern := "/api/v1/hostgroups/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationHostgroupsListHostgroups))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *HostgroupsHTTPClientImpl) UpdateHostgroups(ctx context.Context, in *UpdateHostgroupsRequest, opts ...http.CallOption) (*UpdateHostgroupsReply, error) {
	var out UpdateHostgroupsReply
	pattern := "/api/v1/hostgroups/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationHostgroupsUpdateHostgroups))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

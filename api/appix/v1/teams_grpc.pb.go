// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: appix/v1/teams.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Teams_CreateTeams_FullMethodName = "/api.appix.v1.Teams/CreateTeams"
	Teams_UpdateTeams_FullMethodName = "/api.appix.v1.Teams/UpdateTeams"
	Teams_DeleteTeams_FullMethodName = "/api.appix.v1.Teams/DeleteTeams"
	Teams_GetTeams_FullMethodName    = "/api.appix.v1.Teams/GetTeams"
	Teams_ListTeams_FullMethodName   = "/api.appix.v1.Teams/ListTeams"
)

// TeamsClient is the client API for Teams service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamsClient interface {
	CreateTeams(ctx context.Context, in *CreateTeamsRequest, opts ...grpc.CallOption) (*CreateTeamsReply, error)
	UpdateTeams(ctx context.Context, in *UpdateTeamsRequest, opts ...grpc.CallOption) (*UpdateTeamsReply, error)
	DeleteTeams(ctx context.Context, in *DeleteTeamsRequest, opts ...grpc.CallOption) (*DeleteTeamsReply, error)
	GetTeams(ctx context.Context, in *GetTeamsRequest, opts ...grpc.CallOption) (*GetTeamsReply, error)
	ListTeams(ctx context.Context, in *ListTeamsRequest, opts ...grpc.CallOption) (*ListTeamsReply, error)
}

type teamsClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamsClient(cc grpc.ClientConnInterface) TeamsClient {
	return &teamsClient{cc}
}

func (c *teamsClient) CreateTeams(ctx context.Context, in *CreateTeamsRequest, opts ...grpc.CallOption) (*CreateTeamsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTeamsReply)
	err := c.cc.Invoke(ctx, Teams_CreateTeams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) UpdateTeams(ctx context.Context, in *UpdateTeamsRequest, opts ...grpc.CallOption) (*UpdateTeamsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateTeamsReply)
	err := c.cc.Invoke(ctx, Teams_UpdateTeams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) DeleteTeams(ctx context.Context, in *DeleteTeamsRequest, opts ...grpc.CallOption) (*DeleteTeamsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteTeamsReply)
	err := c.cc.Invoke(ctx, Teams_DeleteTeams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) GetTeams(ctx context.Context, in *GetTeamsRequest, opts ...grpc.CallOption) (*GetTeamsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTeamsReply)
	err := c.cc.Invoke(ctx, Teams_GetTeams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamsClient) ListTeams(ctx context.Context, in *ListTeamsRequest, opts ...grpc.CallOption) (*ListTeamsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTeamsReply)
	err := c.cc.Invoke(ctx, Teams_ListTeams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TeamsServer is the server API for Teams service.
// All implementations must embed UnimplementedTeamsServer
// for forward compatibility.
type TeamsServer interface {
	CreateTeams(context.Context, *CreateTeamsRequest) (*CreateTeamsReply, error)
	UpdateTeams(context.Context, *UpdateTeamsRequest) (*UpdateTeamsReply, error)
	DeleteTeams(context.Context, *DeleteTeamsRequest) (*DeleteTeamsReply, error)
	GetTeams(context.Context, *GetTeamsRequest) (*GetTeamsReply, error)
	ListTeams(context.Context, *ListTeamsRequest) (*ListTeamsReply, error)
	mustEmbedUnimplementedTeamsServer()
}

// UnimplementedTeamsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTeamsServer struct{}

func (UnimplementedTeamsServer) CreateTeams(context.Context, *CreateTeamsRequest) (*CreateTeamsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTeams not implemented")
}
func (UnimplementedTeamsServer) UpdateTeams(context.Context, *UpdateTeamsRequest) (*UpdateTeamsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTeams not implemented")
}
func (UnimplementedTeamsServer) DeleteTeams(context.Context, *DeleteTeamsRequest) (*DeleteTeamsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeams not implemented")
}
func (UnimplementedTeamsServer) GetTeams(context.Context, *GetTeamsRequest) (*GetTeamsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeams not implemented")
}
func (UnimplementedTeamsServer) ListTeams(context.Context, *ListTeamsRequest) (*ListTeamsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTeams not implemented")
}
func (UnimplementedTeamsServer) mustEmbedUnimplementedTeamsServer() {}
func (UnimplementedTeamsServer) testEmbeddedByValue()               {}

// UnsafeTeamsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamsServer will
// result in compilation errors.
type UnsafeTeamsServer interface {
	mustEmbedUnimplementedTeamsServer()
}

func RegisterTeamsServer(s grpc.ServiceRegistrar, srv TeamsServer) {
	// If the following call pancis, it indicates UnimplementedTeamsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Teams_ServiceDesc, srv)
}

func _Teams_CreateTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).CreateTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teams_CreateTeams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).CreateTeams(ctx, req.(*CreateTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_UpdateTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).UpdateTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teams_UpdateTeams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).UpdateTeams(ctx, req.(*UpdateTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_DeleteTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).DeleteTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teams_DeleteTeams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).DeleteTeams(ctx, req.(*DeleteTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_GetTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).GetTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teams_GetTeams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).GetTeams(ctx, req.(*GetTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Teams_ListTeams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTeamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamsServer).ListTeams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Teams_ListTeams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamsServer).ListTeams(ctx, req.(*ListTeamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Teams_ServiceDesc is the grpc.ServiceDesc for Teams service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Teams_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.appix.v1.Teams",
	HandlerType: (*TeamsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTeams",
			Handler:    _Teams_CreateTeams_Handler,
		},
		{
			MethodName: "UpdateTeams",
			Handler:    _Teams_UpdateTeams_Handler,
		},
		{
			MethodName: "DeleteTeams",
			Handler:    _Teams_DeleteTeams_Handler,
		},
		{
			MethodName: "GetTeams",
			Handler:    _Teams_GetTeams_Handler,
		},
		{
			MethodName: "ListTeams",
			Handler:    _Teams_ListTeams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appix/v1/teams.proto",
}

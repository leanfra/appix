// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: api/appix/v1/envs.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Envs_CreateEnvs_FullMethodName = "/api.appix.v1.Envs/CreateEnvs"
	Envs_UpdateEnvs_FullMethodName = "/api.appix.v1.Envs/UpdateEnvs"
	Envs_DeleteEnvs_FullMethodName = "/api.appix.v1.Envs/DeleteEnvs"
	Envs_GetEnvs_FullMethodName    = "/api.appix.v1.Envs/GetEnvs"
	Envs_ListEnvs_FullMethodName   = "/api.appix.v1.Envs/ListEnvs"
)

// EnvsClient is the client API for Envs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvsClient interface {
	CreateEnvs(ctx context.Context, in *CreateEnvsRequest, opts ...grpc.CallOption) (*CreateEnvsReply, error)
	UpdateEnvs(ctx context.Context, in *UpdateEnvsRequest, opts ...grpc.CallOption) (*UpdateEnvsReply, error)
	DeleteEnvs(ctx context.Context, in *DeleteEnvsRequest, opts ...grpc.CallOption) (*DeleteEnvsReply, error)
	GetEnvs(ctx context.Context, in *GetEnvsRequest, opts ...grpc.CallOption) (*GetEnvsReply, error)
	ListEnvs(ctx context.Context, in *ListEnvsRequest, opts ...grpc.CallOption) (*ListEnvsReply, error)
}

type envsClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvsClient(cc grpc.ClientConnInterface) EnvsClient {
	return &envsClient{cc}
}

func (c *envsClient) CreateEnvs(ctx context.Context, in *CreateEnvsRequest, opts ...grpc.CallOption) (*CreateEnvsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateEnvsReply)
	err := c.cc.Invoke(ctx, Envs_CreateEnvs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envsClient) UpdateEnvs(ctx context.Context, in *UpdateEnvsRequest, opts ...grpc.CallOption) (*UpdateEnvsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateEnvsReply)
	err := c.cc.Invoke(ctx, Envs_UpdateEnvs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envsClient) DeleteEnvs(ctx context.Context, in *DeleteEnvsRequest, opts ...grpc.CallOption) (*DeleteEnvsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEnvsReply)
	err := c.cc.Invoke(ctx, Envs_DeleteEnvs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envsClient) GetEnvs(ctx context.Context, in *GetEnvsRequest, opts ...grpc.CallOption) (*GetEnvsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEnvsReply)
	err := c.cc.Invoke(ctx, Envs_GetEnvs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envsClient) ListEnvs(ctx context.Context, in *ListEnvsRequest, opts ...grpc.CallOption) (*ListEnvsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListEnvsReply)
	err := c.cc.Invoke(ctx, Envs_ListEnvs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnvsServer is the server API for Envs service.
// All implementations must embed UnimplementedEnvsServer
// for forward compatibility.
type EnvsServer interface {
	CreateEnvs(context.Context, *CreateEnvsRequest) (*CreateEnvsReply, error)
	UpdateEnvs(context.Context, *UpdateEnvsRequest) (*UpdateEnvsReply, error)
	DeleteEnvs(context.Context, *DeleteEnvsRequest) (*DeleteEnvsReply, error)
	GetEnvs(context.Context, *GetEnvsRequest) (*GetEnvsReply, error)
	ListEnvs(context.Context, *ListEnvsRequest) (*ListEnvsReply, error)
	mustEmbedUnimplementedEnvsServer()
}

// UnimplementedEnvsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnvsServer struct{}

func (UnimplementedEnvsServer) CreateEnvs(context.Context, *CreateEnvsRequest) (*CreateEnvsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnvs not implemented")
}
func (UnimplementedEnvsServer) UpdateEnvs(context.Context, *UpdateEnvsRequest) (*UpdateEnvsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnvs not implemented")
}
func (UnimplementedEnvsServer) DeleteEnvs(context.Context, *DeleteEnvsRequest) (*DeleteEnvsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnvs not implemented")
}
func (UnimplementedEnvsServer) GetEnvs(context.Context, *GetEnvsRequest) (*GetEnvsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnvs not implemented")
}
func (UnimplementedEnvsServer) ListEnvs(context.Context, *ListEnvsRequest) (*ListEnvsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnvs not implemented")
}
func (UnimplementedEnvsServer) mustEmbedUnimplementedEnvsServer() {}
func (UnimplementedEnvsServer) testEmbeddedByValue()              {}

// UnsafeEnvsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvsServer will
// result in compilation errors.
type UnsafeEnvsServer interface {
	mustEmbedUnimplementedEnvsServer()
}

func RegisterEnvsServer(s grpc.ServiceRegistrar, srv EnvsServer) {
	// If the following call pancis, it indicates UnimplementedEnvsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Envs_ServiceDesc, srv)
}

func _Envs_CreateEnvs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvsServer).CreateEnvs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Envs_CreateEnvs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvsServer).CreateEnvs(ctx, req.(*CreateEnvsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Envs_UpdateEnvs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvsServer).UpdateEnvs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Envs_UpdateEnvs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvsServer).UpdateEnvs(ctx, req.(*UpdateEnvsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Envs_DeleteEnvs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvsServer).DeleteEnvs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Envs_DeleteEnvs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvsServer).DeleteEnvs(ctx, req.(*DeleteEnvsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Envs_GetEnvs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnvsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvsServer).GetEnvs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Envs_GetEnvs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvsServer).GetEnvs(ctx, req.(*GetEnvsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Envs_ListEnvs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnvsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvsServer).ListEnvs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Envs_ListEnvs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvsServer).ListEnvs(ctx, req.(*ListEnvsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Envs_ServiceDesc is the grpc.ServiceDesc for Envs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Envs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.appix.v1.Envs",
	HandlerType: (*EnvsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEnvs",
			Handler:    _Envs_CreateEnvs_Handler,
		},
		{
			MethodName: "UpdateEnvs",
			Handler:    _Envs_UpdateEnvs_Handler,
		},
		{
			MethodName: "DeleteEnvs",
			Handler:    _Envs_DeleteEnvs_Handler,
		},
		{
			MethodName: "GetEnvs",
			Handler:    _Envs_GetEnvs_Handler,
		},
		{
			MethodName: "ListEnvs",
			Handler:    _Envs_ListEnvs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/appix/v1/envs.proto",
}

// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.2
// - protoc             v3.12.4
// source: appix/v1/clusters.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationClustersCreateClusters = "/api.appix.v1.Clusters/CreateClusters"
const OperationClustersDeleteClusters = "/api.appix.v1.Clusters/DeleteClusters"
const OperationClustersGetClusters = "/api.appix.v1.Clusters/GetClusters"
const OperationClustersListClusters = "/api.appix.v1.Clusters/ListClusters"
const OperationClustersUpdateClusters = "/api.appix.v1.Clusters/UpdateClusters"

type ClustersHTTPServer interface {
	CreateClusters(context.Context, *CreateClustersRequest) (*CreateClustersReply, error)
	DeleteClusters(context.Context, *DeleteClustersRequest) (*DeleteClustersReply, error)
	GetClusters(context.Context, *GetClustersRequest) (*GetClustersReply, error)
	ListClusters(context.Context, *ListClustersRequest) (*ListClustersReply, error)
	UpdateClusters(context.Context, *UpdateClustersRequest) (*UpdateClustersReply, error)
}

func RegisterClustersHTTPServer(s *http.Server, srv ClustersHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/clusters/create", _Clusters_CreateClusters0_HTTP_Handler(srv))
	r.POST("/api/v1/clusters/update", _Clusters_UpdateClusters0_HTTP_Handler(srv))
	r.POST("/api/v1/clusters/delete", _Clusters_DeleteClusters0_HTTP_Handler(srv))
	r.GET("/api/v1/clusters/{id}", _Clusters_GetClusters0_HTTP_Handler(srv))
	r.POST("/api/v1/clusters/list", _Clusters_ListClusters0_HTTP_Handler(srv))
}

func _Clusters_CreateClusters0_HTTP_Handler(srv ClustersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateClustersRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClustersCreateClusters)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateClusters(ctx, req.(*CreateClustersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateClustersReply)
		return ctx.Result(200, reply)
	}
}

func _Clusters_UpdateClusters0_HTTP_Handler(srv ClustersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateClustersRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClustersUpdateClusters)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateClusters(ctx, req.(*UpdateClustersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateClustersReply)
		return ctx.Result(200, reply)
	}
}

func _Clusters_DeleteClusters0_HTTP_Handler(srv ClustersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteClustersRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClustersDeleteClusters)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteClusters(ctx, req.(*DeleteClustersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteClustersReply)
		return ctx.Result(200, reply)
	}
}

func _Clusters_GetClusters0_HTTP_Handler(srv ClustersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetClustersRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClustersGetClusters)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetClusters(ctx, req.(*GetClustersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetClustersReply)
		return ctx.Result(200, reply)
	}
}

func _Clusters_ListClusters0_HTTP_Handler(srv ClustersHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListClustersRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationClustersListClusters)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListClusters(ctx, req.(*ListClustersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListClustersReply)
		return ctx.Result(200, reply)
	}
}

type ClustersHTTPClient interface {
	CreateClusters(ctx context.Context, req *CreateClustersRequest, opts ...http.CallOption) (rsp *CreateClustersReply, err error)
	DeleteClusters(ctx context.Context, req *DeleteClustersRequest, opts ...http.CallOption) (rsp *DeleteClustersReply, err error)
	GetClusters(ctx context.Context, req *GetClustersRequest, opts ...http.CallOption) (rsp *GetClustersReply, err error)
	ListClusters(ctx context.Context, req *ListClustersRequest, opts ...http.CallOption) (rsp *ListClustersReply, err error)
	UpdateClusters(ctx context.Context, req *UpdateClustersRequest, opts ...http.CallOption) (rsp *UpdateClustersReply, err error)
}

type ClustersHTTPClientImpl struct {
	cc *http.Client
}

func NewClustersHTTPClient(client *http.Client) ClustersHTTPClient {
	return &ClustersHTTPClientImpl{client}
}

func (c *ClustersHTTPClientImpl) CreateClusters(ctx context.Context, in *CreateClustersRequest, opts ...http.CallOption) (*CreateClustersReply, error) {
	var out CreateClustersReply
	pattern := "/api/v1/clusters/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClustersCreateClusters))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClustersHTTPClientImpl) DeleteClusters(ctx context.Context, in *DeleteClustersRequest, opts ...http.CallOption) (*DeleteClustersReply, error) {
	var out DeleteClustersReply
	pattern := "/api/v1/clusters/delete"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClustersDeleteClusters))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClustersHTTPClientImpl) GetClusters(ctx context.Context, in *GetClustersRequest, opts ...http.CallOption) (*GetClustersReply, error) {
	var out GetClustersReply
	pattern := "/api/v1/clusters/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationClustersGetClusters))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClustersHTTPClientImpl) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...http.CallOption) (*ListClustersReply, error) {
	var out ListClustersReply
	pattern := "/api/v1/clusters/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClustersListClusters))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ClustersHTTPClientImpl) UpdateClusters(ctx context.Context, in *UpdateClustersRequest, opts ...http.CallOption) (*UpdateClustersReply, error) {
	var out UpdateClustersReply
	pattern := "/api/v1/clusters/update"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationClustersUpdateClusters))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: appix/v1/features.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Features_CreateFeatures_FullMethodName = "/api.appix.v1.Features/CreateFeatures"
	Features_UpdateFeatures_FullMethodName = "/api.appix.v1.Features/UpdateFeatures"
	Features_DeleteFeatures_FullMethodName = "/api.appix.v1.Features/DeleteFeatures"
	Features_GetFeatures_FullMethodName    = "/api.appix.v1.Features/GetFeatures"
	Features_ListFeatures_FullMethodName   = "/api.appix.v1.Features/ListFeatures"
)

// FeaturesClient is the client API for Features service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeaturesClient interface {
	CreateFeatures(ctx context.Context, in *CreateFeaturesRequest, opts ...grpc.CallOption) (*CreateFeaturesReply, error)
	UpdateFeatures(ctx context.Context, in *UpdateFeaturesRequest, opts ...grpc.CallOption) (*UpdateFeaturesReply, error)
	DeleteFeatures(ctx context.Context, in *DeleteFeaturesRequest, opts ...grpc.CallOption) (*DeleteFeaturesReply, error)
	GetFeatures(ctx context.Context, in *GetFeaturesRequest, opts ...grpc.CallOption) (*GetFeaturesReply, error)
	ListFeatures(ctx context.Context, in *ListFeaturesRequest, opts ...grpc.CallOption) (*ListFeaturesReply, error)
}

type featuresClient struct {
	cc grpc.ClientConnInterface
}

func NewFeaturesClient(cc grpc.ClientConnInterface) FeaturesClient {
	return &featuresClient{cc}
}

func (c *featuresClient) CreateFeatures(ctx context.Context, in *CreateFeaturesRequest, opts ...grpc.CallOption) (*CreateFeaturesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFeaturesReply)
	err := c.cc.Invoke(ctx, Features_CreateFeatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featuresClient) UpdateFeatures(ctx context.Context, in *UpdateFeaturesRequest, opts ...grpc.CallOption) (*UpdateFeaturesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFeaturesReply)
	err := c.cc.Invoke(ctx, Features_UpdateFeatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featuresClient) DeleteFeatures(ctx context.Context, in *DeleteFeaturesRequest, opts ...grpc.CallOption) (*DeleteFeaturesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFeaturesReply)
	err := c.cc.Invoke(ctx, Features_DeleteFeatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featuresClient) GetFeatures(ctx context.Context, in *GetFeaturesRequest, opts ...grpc.CallOption) (*GetFeaturesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetFeaturesReply)
	err := c.cc.Invoke(ctx, Features_GetFeatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *featuresClient) ListFeatures(ctx context.Context, in *ListFeaturesRequest, opts ...grpc.CallOption) (*ListFeaturesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFeaturesReply)
	err := c.cc.Invoke(ctx, Features_ListFeatures_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeaturesServer is the server API for Features service.
// All implementations must embed UnimplementedFeaturesServer
// for forward compatibility.
type FeaturesServer interface {
	CreateFeatures(context.Context, *CreateFeaturesRequest) (*CreateFeaturesReply, error)
	UpdateFeatures(context.Context, *UpdateFeaturesRequest) (*UpdateFeaturesReply, error)
	DeleteFeatures(context.Context, *DeleteFeaturesRequest) (*DeleteFeaturesReply, error)
	GetFeatures(context.Context, *GetFeaturesRequest) (*GetFeaturesReply, error)
	ListFeatures(context.Context, *ListFeaturesRequest) (*ListFeaturesReply, error)
	mustEmbedUnimplementedFeaturesServer()
}

// UnimplementedFeaturesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFeaturesServer struct{}

func (UnimplementedFeaturesServer) CreateFeatures(context.Context, *CreateFeaturesRequest) (*CreateFeaturesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFeatures not implemented")
}
func (UnimplementedFeaturesServer) UpdateFeatures(context.Context, *UpdateFeaturesRequest) (*UpdateFeaturesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFeatures not implemented")
}
func (UnimplementedFeaturesServer) DeleteFeatures(context.Context, *DeleteFeaturesRequest) (*DeleteFeaturesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFeatures not implemented")
}
func (UnimplementedFeaturesServer) GetFeatures(context.Context, *GetFeaturesRequest) (*GetFeaturesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFeatures not implemented")
}
func (UnimplementedFeaturesServer) ListFeatures(context.Context, *ListFeaturesRequest) (*ListFeaturesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFeatures not implemented")
}
func (UnimplementedFeaturesServer) mustEmbedUnimplementedFeaturesServer() {}
func (UnimplementedFeaturesServer) testEmbeddedByValue()                  {}

// UnsafeFeaturesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeaturesServer will
// result in compilation errors.
type UnsafeFeaturesServer interface {
	mustEmbedUnimplementedFeaturesServer()
}

func RegisterFeaturesServer(s grpc.ServiceRegistrar, srv FeaturesServer) {
	// If the following call pancis, it indicates UnimplementedFeaturesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Features_ServiceDesc, srv)
}

func _Features_CreateFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturesServer).CreateFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Features_CreateFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturesServer).CreateFeatures(ctx, req.(*CreateFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Features_UpdateFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturesServer).UpdateFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Features_UpdateFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturesServer).UpdateFeatures(ctx, req.(*UpdateFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Features_DeleteFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturesServer).DeleteFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Features_DeleteFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturesServer).DeleteFeatures(ctx, req.(*DeleteFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Features_GetFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturesServer).GetFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Features_GetFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturesServer).GetFeatures(ctx, req.(*GetFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Features_ListFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeaturesServer).ListFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Features_ListFeatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeaturesServer).ListFeatures(ctx, req.(*ListFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Features_ServiceDesc is the grpc.ServiceDesc for Features service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Features_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.appix.v1.Features",
	HandlerType: (*FeaturesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFeatures",
			Handler:    _Features_CreateFeatures_Handler,
		},
		{
			MethodName: "UpdateFeatures",
			Handler:    _Features_UpdateFeatures_Handler,
		},
		{
			MethodName: "DeleteFeatures",
			Handler:    _Features_DeleteFeatures_Handler,
		},
		{
			MethodName: "GetFeatures",
			Handler:    _Features_GetFeatures_Handler,
		},
		{
			MethodName: "ListFeatures",
			Handler:    _Features_ListFeatures_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "appix/v1/features.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: opspillar/v1/hostgroups.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Hostgroups_CreateHostgroups_FullMethodName = "/api.opspillar.v1.Hostgroups/CreateHostgroups"
	Hostgroups_UpdateHostgroups_FullMethodName = "/api.opspillar.v1.Hostgroups/UpdateHostgroups"
	Hostgroups_DeleteHostgroups_FullMethodName = "/api.opspillar.v1.Hostgroups/DeleteHostgroups"
	Hostgroups_GetHostgroups_FullMethodName    = "/api.opspillar.v1.Hostgroups/GetHostgroups"
	Hostgroups_ListHostgroups_FullMethodName   = "/api.opspillar.v1.Hostgroups/ListHostgroups"
)

// HostgroupsClient is the client API for Hostgroups service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HostgroupsClient interface {
	CreateHostgroups(ctx context.Context, in *CreateHostgroupsRequest, opts ...grpc.CallOption) (*CreateHostgroupsReply, error)
	UpdateHostgroups(ctx context.Context, in *UpdateHostgroupsRequest, opts ...grpc.CallOption) (*UpdateHostgroupsReply, error)
	DeleteHostgroups(ctx context.Context, in *DeleteHostgroupsRequest, opts ...grpc.CallOption) (*DeleteHostgroupsReply, error)
	GetHostgroups(ctx context.Context, in *GetHostgroupsRequest, opts ...grpc.CallOption) (*GetHostgroupsReply, error)
	ListHostgroups(ctx context.Context, in *ListHostgroupsRequest, opts ...grpc.CallOption) (*ListHostgroupsReply, error)
}

type hostgroupsClient struct {
	cc grpc.ClientConnInterface
}

func NewHostgroupsClient(cc grpc.ClientConnInterface) HostgroupsClient {
	return &hostgroupsClient{cc}
}

func (c *hostgroupsClient) CreateHostgroups(ctx context.Context, in *CreateHostgroupsRequest, opts ...grpc.CallOption) (*CreateHostgroupsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateHostgroupsReply)
	err := c.cc.Invoke(ctx, Hostgroups_CreateHostgroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostgroupsClient) UpdateHostgroups(ctx context.Context, in *UpdateHostgroupsRequest, opts ...grpc.CallOption) (*UpdateHostgroupsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateHostgroupsReply)
	err := c.cc.Invoke(ctx, Hostgroups_UpdateHostgroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostgroupsClient) DeleteHostgroups(ctx context.Context, in *DeleteHostgroupsRequest, opts ...grpc.CallOption) (*DeleteHostgroupsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteHostgroupsReply)
	err := c.cc.Invoke(ctx, Hostgroups_DeleteHostgroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostgroupsClient) GetHostgroups(ctx context.Context, in *GetHostgroupsRequest, opts ...grpc.CallOption) (*GetHostgroupsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHostgroupsReply)
	err := c.cc.Invoke(ctx, Hostgroups_GetHostgroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hostgroupsClient) ListHostgroups(ctx context.Context, in *ListHostgroupsRequest, opts ...grpc.CallOption) (*ListHostgroupsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListHostgroupsReply)
	err := c.cc.Invoke(ctx, Hostgroups_ListHostgroups_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HostgroupsServer is the server API for Hostgroups service.
// All implementations must embed UnimplementedHostgroupsServer
// for forward compatibility.
type HostgroupsServer interface {
	CreateHostgroups(context.Context, *CreateHostgroupsRequest) (*CreateHostgroupsReply, error)
	UpdateHostgroups(context.Context, *UpdateHostgroupsRequest) (*UpdateHostgroupsReply, error)
	DeleteHostgroups(context.Context, *DeleteHostgroupsRequest) (*DeleteHostgroupsReply, error)
	GetHostgroups(context.Context, *GetHostgroupsRequest) (*GetHostgroupsReply, error)
	ListHostgroups(context.Context, *ListHostgroupsRequest) (*ListHostgroupsReply, error)
	mustEmbedUnimplementedHostgroupsServer()
}

// UnimplementedHostgroupsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHostgroupsServer struct{}

func (UnimplementedHostgroupsServer) CreateHostgroups(context.Context, *CreateHostgroupsRequest) (*CreateHostgroupsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHostgroups not implemented")
}
func (UnimplementedHostgroupsServer) UpdateHostgroups(context.Context, *UpdateHostgroupsRequest) (*UpdateHostgroupsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostgroups not implemented")
}
func (UnimplementedHostgroupsServer) DeleteHostgroups(context.Context, *DeleteHostgroupsRequest) (*DeleteHostgroupsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHostgroups not implemented")
}
func (UnimplementedHostgroupsServer) GetHostgroups(context.Context, *GetHostgroupsRequest) (*GetHostgroupsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostgroups not implemented")
}
func (UnimplementedHostgroupsServer) ListHostgroups(context.Context, *ListHostgroupsRequest) (*ListHostgroupsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListHostgroups not implemented")
}
func (UnimplementedHostgroupsServer) mustEmbedUnimplementedHostgroupsServer() {}
func (UnimplementedHostgroupsServer) testEmbeddedByValue()                    {}

// UnsafeHostgroupsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HostgroupsServer will
// result in compilation errors.
type UnsafeHostgroupsServer interface {
	mustEmbedUnimplementedHostgroupsServer()
}

func RegisterHostgroupsServer(s grpc.ServiceRegistrar, srv HostgroupsServer) {
	// If the following call pancis, it indicates UnimplementedHostgroupsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Hostgroups_ServiceDesc, srv)
}

func _Hostgroups_CreateHostgroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHostgroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostgroupsServer).CreateHostgroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostgroups_CreateHostgroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostgroupsServer).CreateHostgroups(ctx, req.(*CreateHostgroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostgroups_UpdateHostgroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostgroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostgroupsServer).UpdateHostgroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostgroups_UpdateHostgroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostgroupsServer).UpdateHostgroups(ctx, req.(*UpdateHostgroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostgroups_DeleteHostgroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHostgroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostgroupsServer).DeleteHostgroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostgroups_DeleteHostgroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostgroupsServer).DeleteHostgroups(ctx, req.(*DeleteHostgroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostgroups_GetHostgroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostgroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostgroupsServer).GetHostgroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostgroups_GetHostgroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostgroupsServer).GetHostgroups(ctx, req.(*GetHostgroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hostgroups_ListHostgroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHostgroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HostgroupsServer).ListHostgroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hostgroups_ListHostgroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HostgroupsServer).ListHostgroups(ctx, req.(*ListHostgroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hostgroups_ServiceDesc is the grpc.ServiceDesc for Hostgroups service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hostgroups_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.opspillar.v1.Hostgroups",
	HandlerType: (*HostgroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateHostgroups",
			Handler:    _Hostgroups_CreateHostgroups_Handler,
		},
		{
			MethodName: "UpdateHostgroups",
			Handler:    _Hostgroups_UpdateHostgroups_Handler,
		},
		{
			MethodName: "DeleteHostgroups",
			Handler:    _Hostgroups_DeleteHostgroups_Handler,
		},
		{
			MethodName: "GetHostgroups",
			Handler:    _Hostgroups_GetHostgroups_Handler,
		},
		{
			MethodName: "ListHostgroups",
			Handler:    _Hostgroups_ListHostgroups_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opspillar/v1/hostgroups.proto",
}
